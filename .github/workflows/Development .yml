name: Linux & Windows build - Development

on:
  create:
    tags:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read

env:
  DEVELOPER: 1

concurrency:
  group: ${{ github.sha }}

jobs:
  lint:
    name: Connect to Linux Server
    runs-on: ubuntu-latest
    environment: 'Development'
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          architecture: ${{ matrix.arch }} 
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - uses: actions/checkout@v4

  ci-config:
    name: Configure linux arch 
    if: vars.CI_BRANCHES == '' || contains(vars.CI_BRANCHES, github.ref_name)
    runs-on: ubuntu-latest
    outputs:
      enabled: ${{ steps.check-ref.outputs.enabled }}${{ steps.skip-if-redundant.outputs.enabled }}
      skip_concurrent: ${{ steps.check-ref.outputs.skip_concurrent }}
    steps:
      - name: try to clone ci-config branch
        run: |
          git -c protocol.version=2 clone \
            --no-tags \
            --single-branch \
            -b ci-config \
            --depth 1 \
            --no-checkout \
            --filter=blob:none \
            https://github.com/${{ github.repository }} \
            config-repo &&
          cd config-repo &&
          git checkout HEAD -- ci/config || true
      - id: check-ref
        name: check whether CI is enabled for ref
        run: |
          enabled=yes
          if test -x config-repo/ci/config/allow-ref
          then
            echo "::warning::ci/config/allow-ref is deprecated; use CI_BRANCHES instead"
            if ! config-repo/ci/config/allow-ref '${{ github.ref }}'
            then
              enabled=no
            fi
          fi

          skip_concurrent=yes
          if test -x config-repo/ci/config/skip-concurrent &&
             ! config-repo/ci/config/skip-concurrent '${{ github.ref }}'
          then
            skip_concurrent=no
          fi
          echo "enabled=$enabled" >>$GITHUB_OUTPUT
          echo "skip_concurrent=$skip_concurrent" >>$GITHUB_OUTPUT
      - name: skip if the commit or tree was already tested
        id: skip-if-redundant
        uses: actions/github-script@v7
        if: steps.check-ref.outputs.enabled == 'yes'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { data: run } = await github.rest.actions.getWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId,
              });
              const workflow_id = run.workflow_id;
              const head_sha = run.head_sha;
              const tree_id = run.head_commit.tree_id;

              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 500,
                status: 'success',
                workflow_id,
              });
              for (const run of runs.workflow_runs) {
                if (head_sha === run.head_sha) {
                  core.warning(`Successful run for the commit ${head_sha}: ${run.html_url}`);
                  core.setOutput('enabled', ' but skip');
                  break;
                }
                if (run.head_commit && tree_id === run.head_commit.tree_id) {
                  core.warning(`Successful run for the tree ${tree_id}: ${run.html_url}`);
                  core.setOutput('enabled', ' but skip');
                  break;
                }
              }
            } catch (e) {
              core.warning(e);
            }

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-12, macos-14]
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Create Output Directory
        run: mkdir -p out

  emscripten:
    name: Checkout -- Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

  wasi:
    name: Approve sanitize build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

  sanitize:
    name: Sanitize 1
    runs-on: ubuntu-24.04
    env:
      USE_NINJA: "1"
      CC: "clang"
      WASM2C_CFLAGS: "-march=x86-64-v2"
    strategy:
      matrix:
        sanitizer: [asan, ubsan, fuzz]
        type: [debug, release]
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - uses: actions/checkout@v4
        with:
          submodules: true

  build-wasm2c-memchecked:
    name: Sanitize 1/2 (merge)
    runs-on: ubuntu-latest
    env:
      USE_NINJA: "1"
      CC: "clang"
      WASM2C_CFLAGS: "-march=x86-64-v2 -fsanitize=address -DWASM_RT_USE_MMAP=0"
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - uses: actions/checkout@v4
        with:
          submodules: true
      - run: sudo apt-get install ninja-build
      - name: Workaround for ASLR+ASAN Compatibility
        run: sudo sysctl -w vm.mmap_rnd_bits=28

  windows-build:
    name: win build
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    runs-on: windows-latest
    concurrency:
      group: windows-build-${{ github.ref }}
      cancel-in-progress: ${{ needs.ci-config.outputs.skip_concurrent == 'yes' }}
    steps:
      - uses: actions/checkout@v4
      - name: upload tracked files and build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: artifacts

  linux-build:
    name: linux build
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    runs-on: ubuntu-latest
    concurrency:
      group: linux-build-${{ github.ref }}
      cancel-in-progress: ${{ needs.ci-config.outputs.skip_concurrent == 'yes' }}
    steps:
      - uses: actions/checkout@v4
      - name: upload tracked files and build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tracked-files
          path: artifacts/tracked.tar.gz

  test:
    name: Run Tests
    needs: [windows-build, linux-build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'
      - name: Run tests
        run: npm test

  windows-test:
    name: win test
    runs-on: windows-latest
    needs: [ci-config, windows-build]
    strategy:
      fail-fast: false
      matrix:
        nr: [0, 1,  2, 3, 4, 5, 6, 7, 8, 9]
    concurrency:
      group: windows-test-${{ matrix.nr }}-${{ github.ref }}
      cancel-in-progress: ${{ needs.ci-config.outputs.skip_concurrent == 'yes' }}
    steps:
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          architecture: ${{ matrix.arch }} 
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - uses: actions/checkout@v4


  vs-build:
    name: win+VS build
    needs: [windows-build, linux-build]
    if: github.event.repository.owner.login == 'git-for-windows' && needs.ci-config.outputs.enabled == 'yes'
    env:
      NO_PERL: 1
      GIT_CONFIG_PARAMETERS: "'user.name=CI' 'user.email=ci@git'"
    runs-on: windows-latest
    concurrency:
      group: vs-build-${{ github.ref }}
      cancel-in-progress: ${{ needs.ci-config.outputs.skip_concurrent == 'yes' }}
    steps:
      - uses: actions/checkout@v4
      - uses: git-for-windows/setup-git-for-windows-sdk@v1
      - name: initialize vcpkg
        uses: actions/checkout@v4
        with:
          repository: 'microsoft/vcpkg'
          path: 'compat/vcbuild/vcpkg'
      - name: download vcpkg artifacts
        uses: git-for-windows/get-azure-pipelines-artifact@v0
        with:
          repository: git/git
          definitionId: 9
      - name: add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
      - name: copy dlls to root
        shell: cmd
        run: compat\vcbuild\vcpkg_copy_dlls.bat release
      - name: generate Visual Studio solution
        shell: bash
        run: |
          cmake `pwd`/contrib/buildsystems/ -DCMAKE_PREFIX_PATH=`pwd`/compat/vcbuild/vcpkg/installed/x64-windows \
          -DNO_GETTEXT=YesPlease -DPERL_TESTS=OFF -DPYTHON_TESTS=OFF -DCURL_NO_CURL_CMAKE=ON
      - name: MSBuild
        run: msbuild git.sln -property:Configuration=Release -property:Platform=x64 -maxCpuCount:4 -property:PlatformToolset=v142
      - name: bundle artifact tar
        shell: bash
        env:
          MSVC: 1
          VCPKG_ROOT: ${{ github.workspace }}\compat\vcbuild\vcpkg
        run: |
          mkdir -p artifacts &&
          eval "$(make -n artifacts-tar INCLUDE_DLLS_IN_ARTIFACTS=YesPlease ARTIFACTS_DIRECTORY=artifacts NO_GETTEXT=YesPlease 2>&1 | grep ^tar)"
      - name: zip up tracked files
        run: git archive -o artifacts/tracked.tar.gz HEAD
      - name: upload tracked files and build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vs-artifacts
          path: artifacts

  vs-test:
    name: win+VS test
    runs-on: windows-latest
    needs: [ci-config, vs-build]
    strategy:
      fail-fast: false
      matrix:
        nr: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    concurrency:
      group: vs-test-${{ matrix.nr }}-${{ github.ref }}
      cancel-in-progress: ${{ needs.ci-config.outputs.skip_concurrent == 'yes' }}
    steps:      
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up Windows platform using python - checkout
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Use Node.js - same as linux connect
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          architecture: ${{ matrix.arch }} 

  regular:
    name: ${{ matrix.vector.jobname }} (${{ matrix.vector.pool }})
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    concurrency:
      group: ${{ matrix.vector.jobname }}-${{ matrix.vector.pool }}-${{ github.ref }}
      cancel-in-progress: ${{ needs.ci-config.outputs.skip_concurrent == 'yes' }}
    strategy:
      fail-fast: false
      matrix:
        vector:
          - jobname: linux-sha256
            cc: clang
            pool: ubuntu-latest
          - jobname: linux-reftable
            cc: clang
            pool: ubuntu-latest
          - jobname: linux-gcc
            cc: gcc
            cc_package: gcc-8
            pool: ubuntu-20.04
          - jobname: linux-TEST-vars
            cc: gcc
            cc_package: gcc-8
            pool: ubuntu-20.04
          - jobname: osx-clang
            cc: clang
            pool: macos-13
          - jobname: osx-reftable
            cc: clang
            pool: macos-13
          - jobname: osx-gcc
            cc: gcc-13
            pool: macos-13
          - jobname: linux-gcc-default
            cc: gcc
            pool: ubuntu-latest
          - jobname: linux-leaks
            cc: gcc
            pool: ubuntu-latest
          - jobname: linux-reftable-leaks
            cc: gcc
            pool: ubuntu-latest
          - jobname: linux-asan-ubsan
            cc: clang
            pool: ubuntu-latest
    env:
      CC: ${{ matrix.vector.cc }}
      CC_PACKAGE: ${{ matrix.vector.cc_package }}
      jobname: ${{ matrix.vector.jobname }}
      distro: ${{ matrix.vector.pool }}
    runs-on: ${{ matrix.vector.pool }}
    steps:
      - uses: actions/checkout@v4
      - name: print test failures
        if: failure() && env.FAILED_TEST_ARTIFACTS != ''
        run: ci/print-test-failures.sh
      - name: Upload failed tests' directories
        if: failure() && env.FAILED_TEST_ARTIFACTS != ''
        uses: actions/upload-artifact@v4
        with:
          name: failed-tests-${{ matrix.vector.jobname }}
          path: ${{ env.FAILED_TEST_ARTIFACTS }}

  fuzz-smoke-test:
    name: fuzz smoke test
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    env:
      CC: clang
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

  dockerized:
    name: ${{ matrix.vector.jobname }} (${{ matrix.vector.image }})
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    concurrency:
      group: dockerized-${{ matrix.vector.jobname }}-${{ matrix.vector.image }}-${{ github.ref }}
      cancel-in-progress: ${{ needs.ci-config.outputs.skip_concurrent == 'yes' }}
    strategy:
      fail-fast: false
      matrix:
        vector:
          - jobname: linux-musl
            image: alpine
            distro: alpine-latest
          - jobname: linux32
            image: i386/ubuntu:focal
            distro: ubuntu32-20.04
          - jobname: pedantic
            image: fedora
            distro: fedora-latest
    env:
      jobname: ${{ matrix.vector.jobname }}
      distro: ${{ matrix.vector.distro }}
    runs-on: ubuntu-latest
    container: ${{ matrix.vector.image }}
    steps:
      - name: prepare libc6 for actions
        if: matrix.vector.jobname == 'linux32'
        run: apt -q update && apt -q -y install libc6-amd64 lib64stdc++6
      - uses: actions/checkout@v4
      - name: print test failures
        if: failure() && env.FAILED_TEST_ARTIFACTS != ''
        run: ci/print-test-failures.sh
      - name: Upload failed tests' directories
        if: failure() && env.FAILED_TEST_ARTIFACTS != ''
        uses: actions/upload-artifact@v4
        with:
          name: failed-tests-${{ matrix.vector.jobname }}
          path: ${{ env.FAILED_TEST_ARTIFACTS }}

  static-analysis:
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    env:
      jobname: StaticAnalysis
    runs-on: ubuntu-24.04
    concurrency:
      group: static-analysis-${{ github.ref }}
      cancel-in-progress: ${{ needs.ci-config.outputs.skip_concurrent == 'yes' }}
    steps:
      - uses: actions/checkout@v4

  sparse:
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    env:
      jobname: sparse
    runs-on: ubuntu-24.04
    concurrency:
      group: sparse-${{ github.ref }}
      cancel-in-progress: ${{ needs.ci-config.outputs.skip_concurrent == 'yes' }}
    steps:
      - name: Download a current `sparse` package
        uses: git-for-windows/get-azure-pipelines-artifact@v0
        with:
          repository: git/git
          definitionId: 10
          artifact: sparse-20.04
      - name: Install the current `sparse` package
        run: sudo dpkg -i sparse-20.04/sparse_*.deb
      - uses: actions/checkout@v4

  documentation:
    name: documentation
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    concurrency:
      group: documentation-${{ github.ref }}
      cancel-in-progress: ${{ needs.ci-config.outputs.skip_concurrent == 'yes' }}
    env:
      jobname: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: echo oh
