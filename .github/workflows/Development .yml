name: Linux Server Deployment

on:
  create:
    tags:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read

jobs:
  lint:
    name: Connect to Linux Server
    runs-on: ubuntu-latest
    environment: 'Development'
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          architecture: ${{ matrix.arch }} 
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - uses: actions/checkout@v4

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-12, macos-14]
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Create Output Directory
        run: mkdir -p out

  emscripten:
    name: Emscripten
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

  wasi:
    name: WASI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

  sanitize:
    name: Sanitize 1
    runs-on: ubuntu-24.04
    env:
      USE_NINJA: "1"
      CC: "clang"
      WASM2C_CFLAGS: "-march=x86-64-v2"
    strategy:
      matrix:
        sanitizer: [asan, ubsan, fuzz]
        type: [debug, release]
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - uses: actions/checkout@v4
        with:
          submodules: true

  build-wasm2c-memchecked:
    name: Sanitize 1/2 (merge)
    runs-on: ubuntu-latest
    env:
      USE_NINJA: "1"
      CC: "clang"
      WASM2C_CFLAGS: "-march=x86-64-v2 -fsanitize=address -DWASM_RT_USE_MMAP=0"
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - uses: actions/checkout@v4
        with:
          submodules: true
      - run: sudo apt-get install ninja-build
      - name: Workaround for ASLR+ASAN Compatibility
        run: sudo sysctl -w vm.mmap_rnd_bits=28

  ci:
    name: Sanitize 2
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        node: [20, 18, 16]
        os: [windows-2019, ubuntu-22.04]
        arch: [x64]
        include:
          - os: windows-2019
            arch: x64
            node: 20
          - os: windows-2019
            arch: x86
            node: "18.18.2"
          - os: windows-2019
            arch: x86
            node: 16
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          architecture: ${{ matrix.arch }}
          npm_config_arch: ${{ matrix.arch }}
          TARGET_ARCH: ${{ matrix.arch }}
